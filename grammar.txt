# 格式为A->B C D
# D是声明语句
# S是可执行语句
# /[a]代表该产生式的项目的展望符不能有a

# 初始

P'->P
P->D P
P->S P
P->nil

#####################

# 声明语句

D->Dv
Dv'->Dv Dv'
Dv'->nil /[int real]
D->proc id ( Dv' ) { P }
D->proc id ( ) { P }
D->record id { Dv' }
Dv->T id ;

T->X C'
T->X /[[]
X->int
X->real
C'->C C'
C'->nil /[[]
C->[ number ]

#####################

# 赋值语句

S->id = E ;
E->E + E /[*]
E->E * E
E->- E
E->( E )
E->id
E->number
E->L
L->id [ E ]
L->L [ E ]
S->L = E ;

#####################

# 控制语句
# 设and的优先级高于or
# B表示布尔表达式

S'->S S'
S'->nil /[if while id call]
S->if B then { S' }
S->if B then { S' } else { S' }
S->while B do { S' }
B->B or B /[not and]
B->B and B /[not]
B->not B
B->( B )
B->E < E
B->E <= E
B->E > E
B->E >= E
B->E == E
B->E != E
B->true
B->false

#####################

# 函数调用语句
S->call id ( Elist ) ;
Elist->E , Elist
Elist->E /[,]
Elist->nil

#####################

# 终结符对应的Token
id:<ID,->
int:<INT,->
real:<REAL,->
record:<RECORD,->
number:<INT_NUMBER,->
;:<END,->
end:<ED,->
,:<COMMA,->
(:<LP,->
):<RP,->
[:<LB,->
]:<RB,->
{:<LC,->
}:<RC,->
+:<ADD,->
-:<SUB,->
*:<MULTPLY,->
=:<ASSIGN,->
true:<BOOL_CON,True>
false:<BOOL_CON,False>
if:<IF,->
else:<ELSE,->
then:<THEN,->
while:<WHILE,->
do:<DO,->
proc:<PROCEDURE,->
call:<CALL,->
>:<GT,->
>=:<GE,->
<:<LT,->
<=:<LE,->
==:<EQ,->
!=:<NE,->
or:<OR,->
and:<AND,->
not:<NOT,->

# 恐慌模式的错误恢复
ERROR D
ERROR S