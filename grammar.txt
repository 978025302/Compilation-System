# 格式为A->B C D

P'->P
P->S
P->D
S->S S
D->T id ; D
D->proc id ; D
D->S
D->nil
T->X C
X->int
X->real
C->nil
C->[ number ] C

# /[*]代表该产生式的项目的展望符不能有*

E->E + E /[*]
E->E * E
E->- E
E->( E )
E->id
E->number
E->L
L->id [ E ]
L->L [ E ]

S->id = E ;
S->L = E ;
S->if B then S /[else]
S->if B then S else S
S->while B do S
B->B or B
B->B and B
B->not B
B->( B )
B->E < E
B->E <= E
B->E > E
B->E >= E
B->E == E
B->E != E
B->true
B->false

S->call id ( Elist )
Elist->Elist , E
Elist->E

# 终结符对应的Token
id:<ID,->
int:<INT,->
real:<REAL,->
number:<INT_NUMBER,->
;:<END,->
,:<COMMA,->
(:<LP,->
):<RP,->
[:<LB,->
]:<RB,->
{:<LC,->
}:<RC,->
+:<ADD,->
-:<SUB,->
*:<MULTPLY,->
=:<ASSIGN,->
true:<BOOL_CON,True>
false:<BOOL_CON,False>
if:<IF,->
else:<ELSE,->
then:<THEN,->
while:<WHILE,->
do:<DO,->
proc:<PROCEDURE,->
call:<CALL,->
>:<GT,->
>=:<GE,->
<:<LT,->
<=:<LE,->
==:<EQ,->
!=:<NE,->
or:<OR,->
and:<AND,->
not:<NOT,->

# 恐慌模式的错误恢复
ERROR D
ERROR S