# 格式为A->B C D /[...](可选)
# 产生式后的/[a b]代表该产生式的规约项目展望符不能有a和b(a和b用空格分开)
# X:<type,value>表示非终结符X对应的Token
# WRONG X表示在恐慌模式的错误处理时选取的非终结符

# D是声明语句，Dv是声明语句中的基本类型的声明(包括数组)
# T是基本类型(包括数组)
# B是布尔表达式
# S'是可执行语句序列
# S是可执行语句
# Elist是函数调用时的参数

# 初始

P'->P
P->D P
P->S M P
P->nil

#####################

# 声明语句

D->Dv
Dv'->Dv Dv'
Dv'->nil /[int float]
D->proc id Mp ( Dv' ) { P }
D->proc id Mp ( ) { P }
D->record id Mp { Dv' }
Mp->nil
Dv->T id ;

T->X C'
#T->X /[[]
X->int
X->float
C'->C C'
C'->nil /[[]
C->[ int_num ]

#####################

# 赋值语句

S->id = E ;
E->E + E /[*]
E->E * E
E->- E
E->( E )
E->id
E->int_num
E->float_num
E->L
L->id [ E ]
L->L [ E ]
S->L = E ;

#####################

# 控制语句

S'->S M S'
S'->nil /[if while id call]
S->if B then { M S' }
S->if B then { M S' } N else { M S' }
S->while M B do { M S' }
B->B or M B /[not]
B->B and M B /[not]
B->not B
B->( B )
B->E < E
B->E <= E
B->E > E
B->E >= E
B->E == E
B->E != E
B->true
B->false

M->nil
N->nil

#####################

# 函数调用语句

S->call id ( Elist ) ;
Elist->E , Elist
#Elist->E /[,]
Elist->nil /[,]

#####################

# 终结符对应的Token
id:<ID,->
int:<INT,->
float:<FLOAT,->
record:<RECORD,->
int_num:<INT_NUMBER,->
float_num:<FLOAT_NUMBER,->
;:<END,->
end:<ED,->
,:<COMMA,->
(:<LP,->
):<RP,->
[:<LB,->
]:<RB,->
{:<LC,->
}:<RC,->
+:<ADD,->
-:<SUB,->
*:<MULTPLY,->
=:<ASSIGN,->
true:<BOOL_CON,True>
false:<BOOL_CON,False>
if:<IF,->
else:<ELSE,->
then:<THEN,->
while:<WHILE,->
do:<DO,->
proc:<PROCEDURE,->
call:<CALL,->
>:<GT,->
>=:<GE,->
<:<LT,->
<=:<LE,->
==:<EQ,->
!=:<NE,->
or:<OR,->
and:<AND,->
not:<NOT,->

# 恐慌模式的错误恢复
ERROR D
ERROR S